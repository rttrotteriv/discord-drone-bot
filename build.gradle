plugins {
    id 'java'
    id 'application'
    id 'org.hidetake.ssh' version '2.11.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    manifest {
        attributes("Manifest-Version": "1.0",
                   "Main-Class": "Core")
    }
}

group 'com.cheesetron'
// breaking.feature.bugfix
version '2.1.0'

repositories {
    mavenCentral()

    // lavaplayer repository
    maven { url 'https://m2.dv8tion.net/releases' }
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.19.0'
    implementation 'net.dv8tion:JDA:5.0.0-alpha.18'
    implementation 'com.sedmelluq:lavaplayer:1.3.77'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

application {
    // Define the main class for the application.
    mainClass = 'com.cheesetron.Core'
}

test {
    useJUnitPlatform()
}

remotes {
    horizon {
        host = '10.0.0.10'
        user = 'cheesetron'
        identity = file(System.properties['user.home'] + '/.ssh/id_rsa')
    }
}

tasks.register('deploy') {
    dependsOn 'distZip'
    doLast {
        ssh.run {
            session(remotes.horizon) {
                zipTree(projectDir.absolutePath + '/build/distributions/dronebot-' + version + '.zip').forEach
                        // make sure bin and lib exist otherwise everything goes to heck
                        {
                            if (it.parent.endsWith("/bin")) {
                                put from: it, into: '/opt/com.cheesetron/discorddronebot/bin'
                            } else {
                                put from: it, into: '/opt/com.cheesetron/discorddronebot/lib'
                            }
                        }
                execute 'echo ' + version + ' >> /opt/com.cheesetron/discorddronebot/version'
                execute 'sudo systemctl restart com.cheesetron.dronebot.service'
            }
        }
    }
}